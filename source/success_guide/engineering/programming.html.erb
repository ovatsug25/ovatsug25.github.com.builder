<div id="article">
<p>How do you tell a computer what to do? </p>

<p>By programming it to do something! But what does this mean?</p>

<p>This section will give you a taste for what programming is. We will go over what a programming language is. Then we&#8217;ll take a look at the different types of programming languages that exist. Finally, we will show you some links to get started on the programming language needed for your robot and some provide even more links that will teach you about important languages on the web and your computer.</p>

<p>Learning about programming will let you see how much of your perception and intelligence will take for granted, while at the same time making your thinking more precise.</p>

<h3 id="howtotellahumanwhattodo">How to tell a human what to do</h3>

<p>Let&#8217;s try to answer that question by first asking, how do we tell a human what to do? Once we have a better idea of what it means to communicate a procedure, we can begin to talk about how to program these into the computer and how they are different from the procedures we tell ourseleves.</p>

<ol>
<li>Find a common language. (English, facial expressions, sign language, etc.)</li>
<li>Tell them that you are about to do something that will allow them to achieve a specific goal.</li>
<li>Tell them what they will need to achieve this.</li>
<li>Explain each step of the procedure very carefully with very little ambiguity.</li>
</ol>

<p>Examples of things that do this really well are recipes. For instance here&#8217;s a recipe for really basic scrambled eggs written down in English.</p>

<p><strong>Scrambled Eggs</strong>
Two eggs, butter, salt</p>

<ol>
<li>Heat pan and melt butter</li>
<li>Break eggs into butter</li>
<li>Stir with spatula until cooked</li>
<li>Sprinkle with salt if desired</li>
</ol>

<p>That was easy wasn&#8217;t it? And I bet you that most of you could easily make that. But some of you still won&#8217;t be able to. You guys are special. You are not computers.</p>

<p>Computers need even more specfic instructions for these sorts of things because most of them haven&#8217;t done anything before.</p>

<p><strong>Scrambled Eggs</strong>
Ingredients: 2 eggs, butter, salt
Equipment: Stove, flat pan, spatula</p>

<ol>
<li>Put pan on stove</li>
<li>Turn on stove</li>
<li>Put butter in pan</li>
<li>When heated, break eggs into pan</li>
<li>Stir with spatula until eggs harden to desired level of cookness.</li>
</ol>

<p>As a quick detour, here is the same recipe in Chinese:</p>

<p><strong>炒蛋</strong>
配料：鸡蛋2个，黄油
设备：炉灶，平锅，铲，黄油，盐，胡椒粉</p>

<p>1。把锅上灶
2。打开炉灶
3。把黄油在平底锅
4。当加热时，打入锅蛋
5。用锅铲搅拌，直到鸡蛋变硬所需烤熟水平。</p>

<p>You probably didn&#8217;t understand that, did you?</p>

<p>This is why it is important to have a common-langauge.</p>

<p>What is the compotuer&#8217;s common language? Well, here&#8217;s a taste and it comes in electical signals represented by 0&#8217;s and 1&#8217;s.</p>

<p>000000100100101010111110010101010101010101001001010001010101011111101010100101010101001010100100101010100101010010010100110101001010101010010101</p>

<p>That&#8217;s supposed to say - can i have a slice of pizza? - but you couldn&#8217;t read that could you?</p>

<p>Modern programming languages, such as Java, Python, Ruby, C, LISP and any others that you might have heard of are what we call higher-level programing languages.</p>

<p>Theses are possible because there is a thing called a compiler which can translate something like:</p>

<p>2+2=1 </p>

<p>into something that probably looks like this:</p>

<p>000010101001011001010101011101110101</p>

<p>You can probably see how useful compilers are. There are alos degrees to which a programming language is high-level enough. Some languages act in the way a computer actually works by referring to memory, and others are much more abstarct and don&#8217;t require any specialed knowledge of that type.</p>

<h2 id="heresalistofprorgamminglanguagesbythetypesofproblemtheyweretyringtosolve.thislististakenverbatimfrom:http:paulgraham.comfix.html">Here’s a list of prorgamming languages by the types of problem they were tyring to solve. This list is taken verbatim from: http://paulgraham.com/fix.html</h2>

<p>Algol: Assembly language is too low-level.</p>

<p>Pascal: Algol doesn&#8217;t have enough data types.</p>

<p>Modula: Pascal is too wimpy for systems programming.</p>

<p>Simula: Algol isn&#8217;t good enough at simulations.</p>

<p>Smalltalk: Not everything in Simula is an object.</p>

<p>Fortran: Assembly language is too low-level.</p>

<p>Cobol: Fortran is scary.</p>

<p>PL/1: Fortran doesn&#8217;t have enough data types.</p>

<p>Ada: Every existing language is missing something.</p>

<p>Basic: Fortran is scary.</p>

<p>APL: Fortran isn&#8217;t good enough at manipulating arrays.</p>

<p>J: APL requires its own character set.</p>

<p>C: Assemby language is too low-level.</p>

<p>C++: C is too low-level.</p>

<p>Java: C++ is a kludge. And Microsoft is going to crush us.</p>

<p>C#: Java is controlled by Sun. </p>

<p>Lisp: Turing Machines are an awkward way to describe computation.</p>

<p>Scheme: MacLisp is a kludge.</p>

<p>T: Scheme has no libraries.</p>

<p>Common Lisp: There are too many dialects of Lisp.</p>

<p>Dylan: Scheme has no libraries, and Lisp syntax is scary.</p>

<p>Perl: Shell scripts/awk/sed are not enough like programming languages.</p>

<p>Python: Perl is a kludge.</p>

<p>Ruby: Perl is a kludge, and Lisp syntax is scary.</p>

<p>Prolog: Programming is not enough like logic.</p>

<hr />

<p>The programs you use: Labview- are graphical programming languages that are used because we aren&#8217;t expecting you to be able to manage function and text appropiately. (Don&#8217;t listen to us)</p>

<p>This is a lot of material to digest so sit on it for a littlle bit.</p>

<p>Here are other places to look for more information:</p>

<p>National Instruments Labview<br/>
http://www.ni.com/gettingstarted/labviewbasics/<br/>
This is one of the langauges you can use for your cRio.</p>

<ul>
<li><p><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">Structure and Interpretation of Computer Programs (Lectures)</a><br/>
-Now, this won&#8217;t be easy. The LISP programming language is not exactly common. But learn about it because it is the most powerful tool available to us on the computer. It might take you a few years, but even the crumbs are worth it. Trust me.</p></li>
<li><p><a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs (Free Book)</a><br/>
-This book is available FO FREE. And it is a complement to the lectures and the courses offered above.</p></li>
<li><p>Paul Graham&#8217;s Essays
-http://paulgraham.com/articles.html
-Check out his discusssions of ARC and LISP specifically.</p></li>
</ul>

</div>

<%= render 'success_guide_menu' %>
